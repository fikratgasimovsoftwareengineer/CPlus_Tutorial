
peripheralsDriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007e8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000990  08000998  00010998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000990  08000990  00010998  2**0
                  CONTENTS
  4 .ARM          00000000  08000990  08000990  00010998  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000990  08000998  00010998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000990  08000990  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000994  08000994  00010994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010998  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010998  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008dd  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f1  00000000  00000000  000112a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  00011550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d02  00000000  00000000  000115f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b80  00000000  00000000  000132f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008590  00000000  00000000  00013e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001c402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002a4  00000000  00000000  0001c454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000978 	.word	0x08000978

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000978 	.word	0x08000978

080001e8 <GPIO_PeriClockControl>:
 * @return			- none
 * @Note			- none
 * */

void GPIO_PeriClockControl(GPIO_RefDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d161      	bne.n	80002be <GPIO_PeriClockControl+0xd6>

		if (pGPIOx == GPIOA){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a33      	ldr	r2, [pc, #204]	; (80002cc <GPIO_PeriClockControl+0xe4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>

			GPIOA_PCLK_EN();
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30

	} // Else finished!



} //GPIO RCC Enable Finished
 800020e:	e056      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOB){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a30      	ldr	r2, [pc, #192]	; (80002d4 <GPIO_PeriClockControl+0xec>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 8000224:	e04b      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOC){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <GPIO_PeriClockControl+0xf0>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a27      	ldr	r2, [pc, #156]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 800023a:	e040      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOD){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <GPIO_PeriClockControl+0xf4>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 8000250:	e035      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOE){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <GPIO_PeriClockControl+0xf8>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a1c      	ldr	r2, [pc, #112]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 8000266:	e02a      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOF){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <GPIO_PeriClockControl+0xfc>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 800027c:	e01f      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOG){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <GPIO_PeriClockControl+0x100>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 8000292:	e014      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOH){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <GPIO_PeriClockControl+0x104>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 80002a8:	e009      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if(pGPIOx == GPIOI){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <GPIO_PeriClockControl+0x108>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
} //GPIO RCC Enable Finished
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800
 80002dc:	40020c00 	.word	0x40020c00
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40021400 	.word	0x40021400
 80002e8:	40021800 	.word	0x40021800
 80002ec:	40021c00 	.word	0x40021c00
 80002f0:	40022000 	.word	0x40022000

080002f4 <GPIO_Init>:

 *
 * @return			- none
 * @Note			- none
 * */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
    //1 .GPIO Initialize PinNumber

	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALG){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	795b      	ldrb	r3, [r3, #5]
 8000304:	2b03      	cmp	r3, #3
 8000306:	d81f      	bhi.n	8000348 <GPIO_Init+0x54>

		// SET 0 TO EVERY PIN
		temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << ( 2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	461a      	mov	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	791b      	ldrb	r3, [r3, #4]
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	fa02 f303 	lsl.w	r3, r2, r3
 8000318:	617b      	str	r3, [r7, #20]

		// First Clear
		pGPIO_Handle->pGPIOx->MODER &= ~( 3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	4619      	mov	r1, r3
 8000326:	2303      	movs	r3, #3
 8000328:	408b      	lsls	r3, r1
 800032a:	43db      	mvns	r3, r3
 800032c:	4619      	mov	r1, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	400a      	ands	r2, r1
 8000334:	601a      	str	r2, [r3, #0]

		//Reset
		pGPIO_Handle->pGPIOx->MODER |= temp;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	6819      	ldr	r1, [r3, #0]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	697a      	ldr	r2, [r7, #20]
 8000342:	430a      	orrs	r2, r1
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	e07d      	b.n	8000444 <GPIO_Init+0x150>

	}else{
			/*======Interrupt Handling Section=============*/


		if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	2b04      	cmp	r3, #4
 800034e:	d117      	bne.n	8000380 <GPIO_Init+0x8c>


			// 1. Configure Falling Edge ENABLE
			EXTI->FTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 8000350:	4b8b      	ldr	r3, [pc, #556]	; (8000580 <GPIO_Init+0x28c>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	7912      	ldrb	r2, [r2, #4]
 8000358:	4611      	mov	r1, r2
 800035a:	2201      	movs	r2, #1
 800035c:	408a      	lsls	r2, r1
 800035e:	4611      	mov	r1, r2
 8000360:	4a87      	ldr	r2, [pc, #540]	; (8000580 <GPIO_Init+0x28c>)
 8000362:	430b      	orrs	r3, r1
 8000364:	60d3      	str	r3, [r2, #12]


			//Clear Corresponding RTSR Bit DISABLE
			EXTI->RTSR &=  ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 8000366:	4b86      	ldr	r3, [pc, #536]	; (8000580 <GPIO_Init+0x28c>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	7912      	ldrb	r2, [r2, #4]
 800036e:	4611      	mov	r1, r2
 8000370:	2201      	movs	r2, #1
 8000372:	408a      	lsls	r2, r1
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a81      	ldr	r2, [pc, #516]	; (8000580 <GPIO_Init+0x28c>)
 800037a:	400b      	ands	r3, r1
 800037c:	6093      	str	r3, [r2, #8]
 800037e:	e035      	b.n	80003ec <GPIO_Init+0xf8>


		}else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	795b      	ldrb	r3, [r3, #5]
 8000384:	2b05      	cmp	r3, #5
 8000386:	d117      	bne.n	80003b8 <GPIO_Init+0xc4>


			// 2. Configure Rising Edge ENABLE
			EXTI->RTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 8000388:	4b7d      	ldr	r3, [pc, #500]	; (8000580 <GPIO_Init+0x28c>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	7912      	ldrb	r2, [r2, #4]
 8000390:	4611      	mov	r1, r2
 8000392:	2201      	movs	r2, #1
 8000394:	408a      	lsls	r2, r1
 8000396:	4611      	mov	r1, r2
 8000398:	4a79      	ldr	r2, [pc, #484]	; (8000580 <GPIO_Init+0x28c>)
 800039a:	430b      	orrs	r3, r1
 800039c:	6093      	str	r3, [r2, #8]


			//Clear Corresponding Falling Edge DISABLE
			EXTI->FTSR &=  ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 800039e:	4b78      	ldr	r3, [pc, #480]	; (8000580 <GPIO_Init+0x28c>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	7912      	ldrb	r2, [r2, #4]
 80003a6:	4611      	mov	r1, r2
 80003a8:	2201      	movs	r2, #1
 80003aa:	408a      	lsls	r2, r1
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	4611      	mov	r1, r2
 80003b0:	4a73      	ldr	r2, [pc, #460]	; (8000580 <GPIO_Init+0x28c>)
 80003b2:	400b      	ands	r3, r1
 80003b4:	60d3      	str	r3, [r2, #12]
 80003b6:	e019      	b.n	80003ec <GPIO_Init+0xf8>

		}else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RF){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	795b      	ldrb	r3, [r3, #5]
 80003bc:	2b06      	cmp	r3, #6
 80003be:	d115      	bne.n	80003ec <GPIO_Init+0xf8>

 		    // 3. Configure Rising Edge ENABLE
			EXTI->RTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 80003c0:	4b6f      	ldr	r3, [pc, #444]	; (8000580 <GPIO_Init+0x28c>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	7912      	ldrb	r2, [r2, #4]
 80003c8:	4611      	mov	r1, r2
 80003ca:	2201      	movs	r2, #1
 80003cc:	408a      	lsls	r2, r1
 80003ce:	4611      	mov	r1, r2
 80003d0:	4a6b      	ldr	r2, [pc, #428]	; (8000580 <GPIO_Init+0x28c>)
 80003d2:	430b      	orrs	r3, r1
 80003d4:	6093      	str	r3, [r2, #8]


			//Clear Corresponding Falling Edge ENABLE
			EXTI->FTSR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 80003d6:	4b6a      	ldr	r3, [pc, #424]	; (8000580 <GPIO_Init+0x28c>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	7912      	ldrb	r2, [r2, #4]
 80003de:	4611      	mov	r1, r2
 80003e0:	2201      	movs	r2, #1
 80003e2:	408a      	lsls	r2, r1
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a66      	ldr	r2, [pc, #408]	; (8000580 <GPIO_Init+0x28c>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]


		}

		// after else if, configure GPIO Port Selection in SYSCFG_EXTICR
		uint8_t exti_num =  (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	089b      	lsrs	r3, r3, #2
 80003f2:	74fb      	strb	r3, [r7, #19]

		// identify bits
		uint8_t exti_bit = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4 ) * 4;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	f003 0303 	and.w	r3, r3, #3
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	74bb      	strb	r3, [r7, #18]

		// identify port number
		uint8_t parcode = GPIO_BASEADDR_TOCODE(pGPIO_Handle->pGPIOx);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f9c0 	bl	800078c <GPIO_BASEADDR_TOCODE>
 800040c:	4603      	mov	r3, r0
 800040e:	747b      	strb	r3, [r7, #17]

		// Enable the clock FOR SYSCFG
		SYSCFG_PCLK_EN();
 8000410:	4b5c      	ldr	r3, [pc, #368]	; (8000584 <GPIO_Init+0x290>)
 8000412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000414:	4a5b      	ldr	r2, [pc, #364]	; (8000584 <GPIO_Init+0x290>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041a:	6453      	str	r3, [r2, #68]	; 0x44

		// read starter bit and
		SYSCFG->EXTICR[exti_num] = parcode << exti_bit;
 800041c:	7c7a      	ldrb	r2, [r7, #17]
 800041e:	7cbb      	ldrb	r3, [r7, #18]
 8000420:	fa02 f103 	lsl.w	r1, r2, r3
 8000424:	4a58      	ldr	r2, [pc, #352]	; (8000588 <GPIO_Init+0x294>)
 8000426:	7cfb      	ldrb	r3, [r7, #19]
 8000428:	3302      	adds	r3, #2
 800042a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 4. ENABLE INTERUPT MASK REGISTER
		EXTI->IMR |=  (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800042e:	4b54      	ldr	r3, [pc, #336]	; (8000580 <GPIO_Init+0x28c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	7912      	ldrb	r2, [r2, #4]
 8000436:	4611      	mov	r1, r2
 8000438:	2201      	movs	r2, #1
 800043a:	408a      	lsls	r2, r1
 800043c:	4611      	mov	r1, r2
 800043e:	4a50      	ldr	r2, [pc, #320]	; (8000580 <GPIO_Init+0x28c>)
 8000440:	430b      	orrs	r3, r1
 8000442:	6013      	str	r3, [r2, #0]



	}
	//After GPIO Initialization: Follow these Steps
	temp = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]


	//2. GPIO Configure PinSpeed;
	//LOW SPEED
	temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	799b      	ldrb	r3, [r3, #6]
 800044c:	461a      	mov	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	617b      	str	r3, [r7, #20]
	//Clear
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	4619      	mov	r1, r3
 8000466:	2303      	movs	r3, #3
 8000468:	408b      	lsls	r3, r1
 800046a:	43db      	mvns	r3, r3
 800046c:	4619      	mov	r1, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	400a      	ands	r2, r1
 8000474:	609a      	str	r2, [r3, #8]
	//Reset
	pGPIO_Handle->pGPIOx->OSPEEDR |= temp;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	6899      	ldr	r1, [r3, #8]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	430a      	orrs	r2, r1
 8000484:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]



	//3. Configure GPIO PinPuPdControl;
	//NO PULL UP AND NO PULL DOWN
	temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	79db      	ldrb	r3, [r3, #7]
 800048e:	461a      	mov	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	617b      	str	r3, [r7, #20]
	//Clearning
	pGPIO_Handle->pGPIOx->PUPDR &= ~(3 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	68da      	ldr	r2, [r3, #12]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	4619      	mov	r1, r3
 80004a8:	2303      	movs	r3, #3
 80004aa:	408b      	lsls	r3, r1
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	400a      	ands	r2, r1
 80004b6:	60da      	str	r2, [r3, #12]
	//Reset
	pGPIO_Handle->pGPIOx->PUPDR |= temp;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	68d9      	ldr	r1, [r3, #12]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	697a      	ldr	r2, [r7, #20]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
	temp = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]



	//4. Configure GPIO OTYPEype;
	//Output push-pull (reset state)
	temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_ODPType << (1 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7a1b      	ldrb	r3, [r3, #8]
 80004d0:	461a      	mov	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	617b      	str	r3, [r7, #20]
	//Clearing
	pGPIO_Handle->pGPIOx->OTYPER &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	4619      	mov	r1, r3
 80004e8:	2301      	movs	r3, #1
 80004ea:	408b      	lsls	r3, r1
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
	//Reset
	pGPIO_Handle->pGPIOx->OTYPER |= temp;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6859      	ldr	r1, [r3, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	430a      	orrs	r2, r1
 8000506:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]

	//5. Configure GPIO PinAltFunMode;
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTR){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d131      	bne.n	8000578 <GPIO_Init+0x284>

		uint8_t temp, temp2;
		//Find If Pin belongs to AFR high or lower power
		temp =pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	743b      	strb	r3, [r7, #16]
		// Find AFR Bit POsition
		temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	f003 0307 	and.w	r3, r3, #7
 8000524:	73fb      	strb	r3, [r7, #15]

		//Clearning
		pGPIO_Handle->pGPIOx->AFR[temp] &= ~(0xF << (4 * temp2) );
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	7c3a      	ldrb	r2, [r7, #16]
 800052c:	3208      	adds	r2, #8
 800052e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	220f      	movs	r2, #15
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	4618      	mov	r0, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	7c3a      	ldrb	r2, [r7, #16]
 8000546:	4001      	ands	r1, r0
 8000548:	3208      	adds	r2, #8
 800054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

								  //Reset
		pGPIO_Handle->pGPIOx->AFR[temp] |= (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	7c3a      	ldrb	r2, [r7, #16]
 8000554:	3208      	adds	r2, #8
 8000556:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	7a5b      	ldrb	r3, [r3, #9]
 800055e:	461a      	mov	r2, r3
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	4618      	mov	r0, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	7c3a      	ldrb	r2, [r7, #16]
 8000570:	4301      	orrs	r1, r0
 8000572:	3208      	adds	r2, #8
 8000574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000578:	bf00      	nop
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013c00 	.word	0x40013c00
 8000584:	40023800 	.word	0x40023800
 8000588:	40013800 	.word	0x40013800

0800058c <GPIO_ToggleOutputPin>:
 * @return			- None
 * @Note			- None
 * **********************************************/


void GPIO_ToggleOutputPin(GPIO_RefDef_t *pGPIOx, uint8_t PinNumber){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	78fa      	ldrb	r2, [r7, #3]
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	405a      	eors	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	615a      	str	r2, [r3, #20]


}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <GPIO_IRQConfig>:
 * @Note			- None
 * **********************************************/
/*
 * IRQ Configuration and ISR Handling
 * */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	460a      	mov	r2, r1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	4613      	mov	r3, r2
 80005c6:	71bb      	strb	r3, [r7, #6]

	// if enables bit
	if (EnorDi==ENABLE){
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d133      	bne.n	8000636 <GPIO_IRQConfig+0x7e>


		if (IRQNumber <= 31){
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b1f      	cmp	r3, #31
 80005d2:	d80a      	bhi.n	80005ea <GPIO_IRQConfig+0x32>

			// NVIC-ICER[0] deference

			*NVIC_ISER0 |= (1 << IRQNumber);
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <GPIO_IRQConfig+0xf4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a32      	ldr	r2, [pc, #200]	; (80006ac <GPIO_IRQConfig+0xf4>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6013      	str	r3, [r2, #0]

	}



}
 80005e8:	e059      	b.n	800069e <GPIO_IRQConfig+0xe6>
		}else if(IRQNumber >= 32 && IRQNumber <= 63){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b1f      	cmp	r3, #31
 80005ee:	d90f      	bls.n	8000610 <GPIO_IRQConfig+0x58>
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b3f      	cmp	r3, #63	; 0x3f
 80005f4:	d80c      	bhi.n	8000610 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32) );
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <GPIO_IRQConfig+0xf8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	f002 021f 	and.w	r2, r2, #31
 8000600:	2101      	movs	r1, #1
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <GPIO_IRQConfig+0xf8>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e046      	b.n	800069e <GPIO_IRQConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber <= 96){
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b3f      	cmp	r3, #63	; 0x3f
 8000614:	d943      	bls.n	800069e <GPIO_IRQConfig+0xe6>
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b60      	cmp	r3, #96	; 0x60
 800061a:	d840      	bhi.n	800069e <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <GPIO_IRQConfig+0xfc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <GPIO_IRQConfig+0xfc>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	e033      	b.n	800069e <GPIO_IRQConfig+0xe6>
		if (IRQNumber <= 31){
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b1f      	cmp	r3, #31
 800063a:	d80a      	bhi.n	8000652 <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <GPIO_IRQConfig+0x100>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	2101      	movs	r1, #1
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <GPIO_IRQConfig+0x100>)
 800064c:	430b      	orrs	r3, r1
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	e025      	b.n	800069e <GPIO_IRQConfig+0xe6>
		}else if(IRQNumber >= 32 && IRQNumber <= 63){
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b1f      	cmp	r3, #31
 8000656:	d90f      	bls.n	8000678 <GPIO_IRQConfig+0xc0>
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b3f      	cmp	r3, #63	; 0x3f
 800065c:	d80c      	bhi.n	8000678 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <GPIO_IRQConfig+0x104>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	f002 021f 	and.w	r2, r2, #31
 8000668:	2101      	movs	r1, #1
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <GPIO_IRQConfig+0x104>)
 8000672:	430b      	orrs	r3, r1
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	e012      	b.n	800069e <GPIO_IRQConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber <= 96){
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b3f      	cmp	r3, #63	; 0x3f
 800067c:	d90f      	bls.n	800069e <GPIO_IRQConfig+0xe6>
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b60      	cmp	r3, #96	; 0x60
 8000682:	d80c      	bhi.n	800069e <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <GPIO_IRQConfig+0x108>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <GPIO_IRQConfig+0x108>)
 8000698:	430b      	orrs	r3, r1
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	e7ff      	b.n	800069e <GPIO_IRQConfig+0xe6>
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000e104 	.word	0xe000e104
 80006b4:	e000e108 	.word	0xe000e108
 80006b8:	e000e180 	.word	0xe000e180
 80006bc:	e000e184 	.word	0xe000e184
 80006c0:	e000e188 	.word	0xe000e188

080006c4 <GPIO_PRIORITY>:
 * IRQ Configuration and ISR Handling
 * */



void GPIO_PRIORITY(uint8_t IRQNumber, uint32_t IRQPriority){
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]

	// find out  interrupt priority register number
	uint8_t iprx = IRQNumber / 4;
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	73fb      	strb	r3, [r7, #15]
	// find out interrupt section
	uint8_t iprx_sect = IRQNumber % 4;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	73bb      	strb	r3, [r7, #14]

	// Shift amount
	uint8_t shift_amount =  ( iprx_sect * 8) + (8 - NO_USED_BITS);
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	3304      	adds	r3, #4
 80006e6:	737b      	strb	r3, [r7, #13]

	// increase up to interrupt priority number *(NVIC_BASE_ADDR + irq_ipr)
	//
	// ipr_sect * 8 find out startting bits of sections ( ipr_sect* 8)
	*(NVIC_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80006f0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80006f4:	6819      	ldr	r1, [r3, #0]
 80006f6:	7b7b      	ldrb	r3, [r7, #13]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	409a      	lsls	r2, r3
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000704:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000708:	430a      	orrs	r2, r1
 800070a:	601a      	str	r2, [r3, #0]




}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <GPIO_INTERRUPT_Handling>:
/*
 * IRQ Configuration and ISR Handling
 * */


void GPIO_INTERRUPT_Handling(uint8_t PinNumber){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]

	// if you see it is not triggered!
	if (EXTI->PR &= (1 << PinNumber)){
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <GPIO_INTERRUPT_Handling+0x44>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	4611      	mov	r1, r2
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <GPIO_INTERRUPT_Handling+0x44>)
 8000732:	400b      	ands	r3, r1
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d009      	beq.n	800074e <GPIO_INTERRUPT_Handling+0x36>

		// clear
		EXTI->PR |= (1 << PinNumber);
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <GPIO_INTERRUPT_Handling+0x44>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	2101      	movs	r1, #1
 8000742:	fa01 f202 	lsl.w	r2, r1, r2
 8000746:	4611      	mov	r1, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <GPIO_INTERRUPT_Handling+0x44>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6153      	str	r3, [r2, #20]
	}


}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40013c00 	.word	0x40013c00

08000760 <delay>:


// ==================DELAY FUNCTION ========================


void delay(){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

	for(uint32_t i = 0; i< 50000/2; i++);
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	e002      	b.n	8000772 <delay+0x12>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000778:	4293      	cmp	r3, r2
 800077a:	d9f7      	bls.n	800076c <delay+0xc>



}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <GPIO_BASEADDR_TOCODE>:
 * **********************************************/
/*
 * IRQ Configuration and ISR Handling
 * */

uint8_t GPIO_BASEADDR_TOCODE(GPIO_RefDef_t *pGPIOx){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

	// check if pointer points to GPIOA port
	// if yes, return 0, otherwise, check all statements!
	if(pGPIOx==GPIOA){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <GPIO_BASEADDR_TOCODE+0x74>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d101      	bne.n	80007a0 <GPIO_BASEADDR_TOCODE+0x14>

		return 0;
 800079c:	2300      	movs	r3, #0
 800079e:	e029      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if(pGPIOx==GPIOB){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <GPIO_BASEADDR_TOCODE+0x78>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d101      	bne.n	80007ac <GPIO_BASEADDR_TOCODE+0x20>

		return 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e023      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if (pGPIOx==GPIOC){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <GPIO_BASEADDR_TOCODE+0x7c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d101      	bne.n	80007b8 <GPIO_BASEADDR_TOCODE+0x2c>

		return 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	e01d      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if(pGPIOx == GPIOD){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <GPIO_BASEADDR_TOCODE+0x80>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d101      	bne.n	80007c4 <GPIO_BASEADDR_TOCODE+0x38>

		return 3;
 80007c0:	2303      	movs	r3, #3
 80007c2:	e017      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if(pGPIOx==GPIOE){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <GPIO_BASEADDR_TOCODE+0x84>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d101      	bne.n	80007d0 <GPIO_BASEADDR_TOCODE+0x44>

		return 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	e011      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if(pGPIOx==GPIOF){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <GPIO_BASEADDR_TOCODE+0x88>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d101      	bne.n	80007dc <GPIO_BASEADDR_TOCODE+0x50>

		return 5;
 80007d8:	2305      	movs	r3, #5
 80007da:	e00b      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if(pGPIOx==GPIOG){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <GPIO_BASEADDR_TOCODE+0x8c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d101      	bne.n	80007e8 <GPIO_BASEADDR_TOCODE+0x5c>

		return 6;
 80007e4:	2306      	movs	r3, #6
 80007e6:	e005      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}else if(pGPIOx==GPIOI){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <GPIO_BASEADDR_TOCODE+0x90>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d101      	bne.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>

		return 7;
 80007f0:	2307      	movs	r3, #7
 80007f2:	e7ff      	b.n	80007f4 <GPIO_BASEADDR_TOCODE+0x68>
	}
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021000 	.word	0x40021000
 8000814:	40021400 	.word	0x40021400
 8000818:	40021800 	.word	0x40021800
 800081c:	40022000 	.word	0x40022000

08000820 <main>:

#include "stm32F407xx.h"
#include "stm32fxx.gpio_driver.c"


int main(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioLed, gpioButton;


	// Memset
	memset(&gpioLed, 0, sizeof(gpioLed));
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	220c      	movs	r2, #12
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f89a 	bl	8000968 <memset>
	memset(&gpioButton, 0, sizeof(gpioButton));
 8000834:	463b      	mov	r3, r7
 8000836:	220c      	movs	r2, #12
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f894 	bl	8000968 <memset>


	// GPIO LED CONFIGURATION
	gpioLed.pGPIOx = GPIOD;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <main+0x88>)
 8000842:	60fb      	str	r3, [r7, #12]
	gpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000844:	230c      	movs	r3, #12
 8000846:	743b      	strb	r3, [r7, #16]
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000848:	2301      	movs	r3, #1
 800084a:	747b      	strb	r3, [r7, #17]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = V_HIGH_SPEED;
 800084c:	2303      	movs	r3, #3
 800084e:	74bb      	strb	r3, [r7, #18]
	gpioLed.GPIO_PinConfig.GPIO_ODPType = GPIO_OUPUSHPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	753b      	strb	r3, [r7, #20]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = NO_PUL_DOWN;
 8000854:	2300      	movs	r3, #0
 8000856:	74fb      	strb	r3, [r7, #19]


	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000858:	2101      	movs	r1, #1
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <main+0x88>)
 800085c:	f7ff fcc4 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_Init(&gpioLed);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fd45 	bl	80002f4 <GPIO_Init>



	// Button LED CONFIGURATION!

	gpioButton.pGPIOx = GPIOD;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <main+0x88>)
 800086c:	603b      	str	r3, [r7, #0]
	//button is PD 5
	gpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800086e:	2305      	movs	r3, #5
 8000870:	713b      	strb	r3, [r7, #4]
	gpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000872:	2304      	movs	r3, #4
 8000874:	717b      	strb	r3, [r7, #5]
	gpioButton.GPIO_PinConfig.GPIO_PinSpeed = V_HIGH_SPEED;
 8000876:	2303      	movs	r3, #3
 8000878:	71bb      	strb	r3, [r7, #6]
	gpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = PUL_UP;
 800087a:	2301      	movs	r3, #1
 800087c:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 800087e:	2101      	movs	r1, #1
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <main+0x88>)
 8000882:	f7ff fcb1 	bl	80001e8 <GPIO_PeriClockControl>


	GPIO_Init(&gpioButton);
 8000886:	463b      	mov	r3, r7
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd33 	bl	80002f4 <GPIO_Init>

	// SET PRIORTY
	GPIO_PRIORITY(IRQ_NO_EXTI_5_9, NVIC_IRQ_PRI_15);
 800088e:	210f      	movs	r1, #15
 8000890:	2017      	movs	r0, #23
 8000892:	f7ff ff17 	bl	80006c4 <GPIO_PRIORITY>

	//IRQ CONFIGURATION
	GPIO_IRQConfig(IRQ_NO_EXTI_5_9, ENABLE);
 8000896:	2101      	movs	r1, #1
 8000898:	2017      	movs	r0, #23
 800089a:	f7ff fe8d 	bl	80005b8 <GPIO_IRQConfig>



	return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40020c00 	.word	0x40020c00

080008ac <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

	delay();
 80008b0:	f7ff ff56 	bl	8000760 <delay>

	GPIO_INTERRUPT_Handling(GPIO_PIN_NO_5);
 80008b4:	2005      	movs	r0, #5
 80008b6:	f7ff ff2f 	bl	8000718 <GPIO_INTERRUPT_Handling>


	// toggle led
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80008ba:	210c      	movs	r1, #12
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <EXTI9_5_IRQHandler+0x1c>)
 80008be:	f7ff fe65 	bl	800058c <GPIO_ToggleOutputPin>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020c00 	.word	0x40020c00

080008cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <LoopForever+0xe>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	; (8000918 <LoopForever+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fa:	f000 f811 	bl	8000920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff ff8f 	bl	8000820 <main>

08000902 <LoopForever>:

LoopForever:
    b LoopForever
 8000902:	e7fe      	b.n	8000902 <LoopForever>
  ldr   r0, =_estack
 8000904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000910:	08000998 	.word	0x08000998
  ldr r2, =_sbss
 8000914:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000918:	2000001c 	.word	0x2000001c

0800091c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <__libc_init_array>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	4d0d      	ldr	r5, [pc, #52]	; (8000958 <__libc_init_array+0x38>)
 8000924:	4c0d      	ldr	r4, [pc, #52]	; (800095c <__libc_init_array+0x3c>)
 8000926:	1b64      	subs	r4, r4, r5
 8000928:	10a4      	asrs	r4, r4, #2
 800092a:	2600      	movs	r6, #0
 800092c:	42a6      	cmp	r6, r4
 800092e:	d109      	bne.n	8000944 <__libc_init_array+0x24>
 8000930:	4d0b      	ldr	r5, [pc, #44]	; (8000960 <__libc_init_array+0x40>)
 8000932:	4c0c      	ldr	r4, [pc, #48]	; (8000964 <__libc_init_array+0x44>)
 8000934:	f000 f820 	bl	8000978 <_init>
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	10a4      	asrs	r4, r4, #2
 800093c:	2600      	movs	r6, #0
 800093e:	42a6      	cmp	r6, r4
 8000940:	d105      	bne.n	800094e <__libc_init_array+0x2e>
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f855 3b04 	ldr.w	r3, [r5], #4
 8000948:	4798      	blx	r3
 800094a:	3601      	adds	r6, #1
 800094c:	e7ee      	b.n	800092c <__libc_init_array+0xc>
 800094e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000952:	4798      	blx	r3
 8000954:	3601      	adds	r6, #1
 8000956:	e7f2      	b.n	800093e <__libc_init_array+0x1e>
 8000958:	08000990 	.word	0x08000990
 800095c:	08000990 	.word	0x08000990
 8000960:	08000990 	.word	0x08000990
 8000964:	08000994 	.word	0x08000994

08000968 <memset>:
 8000968:	4402      	add	r2, r0
 800096a:	4603      	mov	r3, r0
 800096c:	4293      	cmp	r3, r2
 800096e:	d100      	bne.n	8000972 <memset+0xa>
 8000970:	4770      	bx	lr
 8000972:	f803 1b01 	strb.w	r1, [r3], #1
 8000976:	e7f9      	b.n	800096c <memset+0x4>

08000978 <_init>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	bf00      	nop
 800097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097e:	bc08      	pop	{r3}
 8000980:	469e      	mov	lr, r3
 8000982:	4770      	bx	lr

08000984 <_fini>:
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	bf00      	nop
 8000988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098a:	bc08      	pop	{r3}
 800098c:	469e      	mov	lr, r3
 800098e:	4770      	bx	lr
