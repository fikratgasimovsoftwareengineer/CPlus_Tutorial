/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "main.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif





int main(void)
{
	//Enable RCC for gpio Mode: volatile data and const pointer
	RCC_AHB1ENR_t volatile *const pClockCtrReg = (RCC_AHB1ENR_t*) 0x40023830;

	GPIOx_MODE_t const  *pPortDModeReg= (GPIOx_MODE_t*) 0x40020C00;

	// GPIO Output Data Register to write
	GPIOx_ODR_t const *pPortDoutReg = (GPIOx_ODR_t*) 0x40020C14;



	// Abilitare GPIOD with RCC
	pClockCtrReg->gpiod_en = 1;



	// Access PIn 12 with GPIO As OutPut mode
    pPortDModeReg->pin_12 = 1;

	//GPIO Mode Register

    while(1){

    	pPortDoutReg->pin_12 = 1;

    	for(uint32_t i =0; i < 1000; i++);

    	pPortDoutReg->pin_12 = 0;

    	for(uint32_t i =0; i< 1000; i++);



    }
}
